# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import gfs_pb2 as gfs__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in gfs_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MasterToClientStub(object):
    """Interface exported by the master server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_id = channel.unary_unary(
                '/GFS.MasterToClient/get_id',
                request_serializer=gfs__pb2.EmptyRequest.SerializeToString,
                response_deserializer=gfs__pb2.IDResponse.FromString,
                _registered_method=True)
        self.create_file = channel.unary_unary(
                '/GFS.MasterToClient/create_file',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.Status.FromString,
                _registered_method=True)
        self.delete_file = channel.unary_unary(
                '/GFS.MasterToClient/delete_file',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.Status.FromString,
                _registered_method=True)
        self.list_files = channel.unary_stream(
                '/GFS.MasterToClient/list_files',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                _registered_method=True)
        self.get_chunk_locs = channel.unary_unary(
                '/GFS.MasterToClient/get_chunk_locs',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.Status.FromString,
                _registered_method=True)
        self.commit_chunk = channel.unary_unary(
                '/GFS.MasterToClient/commit_chunk',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.Status.FromString,
                _registered_method=True)
        self.file_create_status = channel.unary_unary(
                '/GFS.MasterToClient/file_create_status',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.Status.FromString,
                _registered_method=True)
        self.get_chunk_details = channel.unary_unary(
                '/GFS.MasterToClient/get_chunk_details',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.Status.FromString,
                _registered_method=True)


class MasterToClientServicer(object):
    """Interface exported by the master server
    """

    def get_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_file(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_file(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_files(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_chunk_locs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commit_chunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def file_create_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_chunk_details(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterToClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_id': grpc.unary_unary_rpc_method_handler(
                    servicer.get_id,
                    request_deserializer=gfs__pb2.EmptyRequest.FromString,
                    response_serializer=gfs__pb2.IDResponse.SerializeToString,
            ),
            'create_file': grpc.unary_unary_rpc_method_handler(
                    servicer.create_file,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.Status.SerializeToString,
            ),
            'delete_file': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_file,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.Status.SerializeToString,
            ),
            'list_files': grpc.unary_stream_rpc_method_handler(
                    servicer.list_files,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'get_chunk_locs': grpc.unary_unary_rpc_method_handler(
                    servicer.get_chunk_locs,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.Status.SerializeToString,
            ),
            'commit_chunk': grpc.unary_unary_rpc_method_handler(
                    servicer.commit_chunk,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.Status.SerializeToString,
            ),
            'file_create_status': grpc.unary_unary_rpc_method_handler(
                    servicer.file_create_status,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.Status.SerializeToString,
            ),
            'get_chunk_details': grpc.unary_unary_rpc_method_handler(
                    servicer.get_chunk_details,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GFS.MasterToClient', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('GFS.MasterToClient', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MasterToClient(object):
    """Interface exported by the master server
    """

    @staticmethod
    def get_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/GFS.MasterToClient/get_id',
            gfs__pb2.EmptyRequest.SerializeToString,
            gfs__pb2.IDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def create_file(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/GFS.MasterToClient/create_file',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def delete_file(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/GFS.MasterToClient/delete_file',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def list_files(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/GFS.MasterToClient/list_files',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_chunk_locs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/GFS.MasterToClient/get_chunk_locs',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def commit_chunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/GFS.MasterToClient/commit_chunk',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def file_create_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/GFS.MasterToClient/file_create_status',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_chunk_details(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/GFS.MasterToClient/get_chunk_details',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ChunkToClientStub(object):
    """Interface exported by the chunk server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_chunk = channel.stream_unary(
                '/GFS.ChunkToClient/create_chunk',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.Status.FromString,
                _registered_method=True)
        self.read_chunk = channel.unary_stream(
                '/GFS.ChunkToClient/read_chunk',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                _registered_method=True)


class ChunkToClientServicer(object):
    """Interface exported by the chunk server
    """

    def create_chunk(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read_chunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChunkToClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_chunk': grpc.stream_unary_rpc_method_handler(
                    servicer.create_chunk,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.Status.SerializeToString,
            ),
            'read_chunk': grpc.unary_stream_rpc_method_handler(
                    servicer.read_chunk,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GFS.ChunkToClient', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('GFS.ChunkToClient', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChunkToClient(object):
    """Interface exported by the chunk server
    """

    @staticmethod
    def create_chunk(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/GFS.ChunkToClient/create_chunk',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def read_chunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/GFS.ChunkToClient/read_chunk',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ChunkToChunkStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_chunk = channel.stream_unary(
                '/GFS.ChunkToChunk/create_chunk',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.Status.FromString,
                _registered_method=True)
        self.read_entire_chunk = channel.unary_stream(
                '/GFS.ChunkToChunk/read_entire_chunk',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                _registered_method=True)


class ChunkToChunkServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create_chunk(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read_entire_chunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChunkToChunkServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_chunk': grpc.stream_unary_rpc_method_handler(
                    servicer.create_chunk,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.Status.SerializeToString,
            ),
            'read_entire_chunk': grpc.unary_stream_rpc_method_handler(
                    servicer.read_entire_chunk,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GFS.ChunkToChunk', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('GFS.ChunkToChunk', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChunkToChunk(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create_chunk(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/GFS.ChunkToChunk/create_chunk',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def read_entire_chunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/GFS.ChunkToChunk/read_entire_chunk',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ChunkToMasterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.commit_chunk = channel.unary_unary(
                '/GFS.ChunkToMaster/commit_chunk',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.Status.FromString,
                _registered_method=True)
        self.delete_chunks = channel.stream_unary(
                '/GFS.ChunkToMaster/delete_chunks',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.Status.FromString,
                _registered_method=True)
        self.replicate_chunk = channel.unary_unary(
                '/GFS.ChunkToMaster/replicate_chunk',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.Status.FromString,
                _registered_method=True)
        self.heartbeat = channel.unary_unary(
                '/GFS.ChunkToMaster/heartbeat',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.Status.FromString,
                _registered_method=True)


class ChunkToMasterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def commit_chunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_chunks(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def replicate_chunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChunkToMasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'commit_chunk': grpc.unary_unary_rpc_method_handler(
                    servicer.commit_chunk,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.Status.SerializeToString,
            ),
            'delete_chunks': grpc.stream_unary_rpc_method_handler(
                    servicer.delete_chunks,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.Status.SerializeToString,
            ),
            'replicate_chunk': grpc.unary_unary_rpc_method_handler(
                    servicer.replicate_chunk,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.Status.SerializeToString,
            ),
            'heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.heartbeat,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GFS.ChunkToMaster', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('GFS.ChunkToMaster', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChunkToMaster(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def commit_chunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/GFS.ChunkToMaster/commit_chunk',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def delete_chunks(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/GFS.ChunkToMaster/delete_chunks',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def replicate_chunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/GFS.ChunkToMaster/replicate_chunk',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/GFS.ChunkToMaster/heartbeat',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MasterToChunkStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.query_chunks = channel.stream_stream(
                '/GFS.MasterToChunk/query_chunks',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                _registered_method=True)


class MasterToChunkServicer(object):
    """Missing associated documentation comment in .proto file."""

    def query_chunks(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterToChunkServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'query_chunks': grpc.stream_stream_rpc_method_handler(
                    servicer.query_chunks,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GFS.MasterToChunk', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('GFS.MasterToChunk', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MasterToChunk(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def query_chunks(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/GFS.MasterToChunk/query_chunks',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
